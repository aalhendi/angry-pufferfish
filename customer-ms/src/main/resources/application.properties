spring.application.name=customer-ms

# Spring Cloud Configuration
# TODO(aalhendi): Remove this when we have Consul
spring.config.import=optional:consul:
spring.cloud.consul.enabled=false

# Server Configuration
server.port=8081

# Database Configuration
spring.datasource.url=jdbc:postgresql://localhost:5432/customer_db
spring.datasource.username=customer_user
spring.datasource.password=customer_pass
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA/Hibernate Configuration
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true

# Liquibase Configuration
spring.liquibase.change-log=classpath:db/changelog/db.changelog-root.xml
spring.liquibase.enabled=true
spring.liquibase.drop-first=false

# Logging Configuration
logging.level.org.springframework.web=INFO
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.level.liquibase=INFO

# Actuator Configuration
management.endpoints.web.exposure.include=health,info,metrics,liquibase
management.endpoint.health.show-details=always

# OTLP metrics Configuration
# TODO(aalhendi): Remove this when we have a metrics exporter
management.otlp.metrics.export.enabled=false

# Validation Configuration
# TODO(aalhendi): Remove this when we have a validation framework
spring.jpa.properties.javax.persistence.validation.mode=none

# Docker Compose Configuration
# TODO(aalhendi): Maybe we can leverage the thing that ships with Spring Boot?
spring.docker.compose.enabled=false
