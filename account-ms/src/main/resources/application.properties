spring.application.name=account-ms

# Spring Cloud Configuration
# TODO(aalhendi): Remove this when we have Consul
spring.config.import=optional:consul:
spring.cloud.consul.enabled=false

# Server Configuration
server.port=8080

# Database Configuration
spring.datasource.url=jdbc:postgresql://localhost:5432/account_db
spring.datasource.username=account_user
spring.datasource.password=account_pass
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA/Hibernate Configuration
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true

# Liquibase Configuration
spring.liquibase.change-log=classpath:db/changelog/db.changelog-root.xml
spring.liquibase.enabled=true
spring.liquibase.drop-first=false

# Logging Configuration
logging.level.com.aalhendi.account_ms=DEBUG
logging.level.org.springframework.web=INFO
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.level.liquibase=INFO

# Actuator Configuration
management.endpoints.web.exposure.include=health,info,metrics,liquibase
management.endpoint.health.show-details=always

# OTLP metrics Configuration
# TODO(aalhendi): Remove this when we have a metrics exporter
management.otlp.metrics.export.enabled=false

# Validation Configuration
# TODO(aalhendi): Remove this when we have a validation framework
spring.jpa.properties.javax.persistence.validation.mode=none

# Docker Compose Configuration
# TODO(aalhendi): Maybe we can leverage the thing that ships with Spring Boot?
spring.docker.compose.enabled=false

# gRPC Server Configuration (for account service)
spring.grpc.server.port=9093

# gRPC Client Configuration (to call customer service)
grpc.client.customer-service.host=localhost
grpc.client.customer-service.port=9091

# Kafka Configuration
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=account-service
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.enable-auto-commit=true
spring.kafka.consumer.auto-commit-interval=1000
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.acks=all
spring.kafka.producer.retries=3
spring.kafka.producer.batch-size=16384
spring.kafka.producer.linger-ms=1
spring.kafka.producer.buffer-memory=33554432

# Kafka Topic Configuration
spring.kafka.admin.auto-create=true
spring.kafka.admin.fail-fast=true

# Kafka Logging for debugging
logging.level.org.apache.kafka=INFO
logging.level.org.springframework.kafka=DEBUG

# gRPC Logging for debugging
logging.level.org.springframework.grpc=DEBUG
logging.level.io.grpc=INFO
